---
import { tagFor } from '../util/tags';
import Banner from './Banner.astro';
import FlagInput from './FlagInput.astro';
import Tag from './Tag.astro';

interface Props {
    id: string | number;
    name: string;
    author?: string; 
    presentedBy?: string; 
    tags?: string[];
    snippet?: string;
    datePresented: string;
    preview?: boolean;
    link?: string;
    flag: string;
    flagFormat: string;
    collapsed?: boolean;
}

const {
    id,
    name,
    author,
    presentedBy = "Status 418",
    datePresented = "Unknown Date",
    snippet = "",
    preview = false,
    link, 
    flag,
    flagFormat,
    collapsed = false,
} = Astro.props;

const tags = (Astro.props.tags || []).map((tag) =>
  tagFor(tag, "border", !preview),
);
---

<article class="weekly-problem-item" data-collapsed={collapsed}>
  <button class="collapse-toggle" aria-label="Toggle problem details">
    <svg class="chevron" width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
      <path d="M8 10.5L3.5 6 4.5 5l3.5 3.5L11.5 5l1 1-4.5 4.5z"/>
    </svg>
  </button>

  <header class="problem-header">
    <div class="problem-meta">
      {author && <span class="author">Author: {author}</span>}
      <span class="presented-info">Presented by {presentedBy} on {datePresented}</span>
    </div>
    <h2 class="problem-title">{name}</h2>
    {tags.length > 0 && (
      <div class="tags">
        {tags.map((tag) => (
          <Tag text={tag.text} color={tag.color} type={tag.type} url={tag.url} />
        ))}
      </div>
    )}
  </header>

  <div class="collapsible-content">
    <div class="problem-content">
      {snippet && (
        <div class="snippet-container">
          <p class="snippet" set:html={snippet} />
        </div>
      )}
      
      <div class="problem-actions">
        <Banner 
          icon="archive"
          text="Download Problem"
          url={link || "#"}
        /> 
      </div>
    </div>

    <footer class="problem-footer">
      <FlagInput challengeID={id} flag={flag} flagFormat={flagFormat} />
    </footer>
  </div>
</article>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const items = document.querySelectorAll('.weekly-problem-item');
    
    items.forEach(item => {
      const isCollapsed = item.getAttribute('data-collapsed') === 'true';
      const content = item.querySelector('.collapsible-content') as HTMLElement;
      const toggle = item.querySelector('.collapse-toggle');
      
      if (!content || !toggle) return;
      
      // Set initial state
      if (isCollapsed) {
        content.style.maxHeight = '0';
        item.classList.add('collapsed');
      } else {
        content.style.maxHeight = content.scrollHeight + 'px';
      }
      
      toggle.addEventListener('click', () => {
        const isCurrentlyCollapsed = item.classList.contains('collapsed');
        
        if (isCurrentlyCollapsed) {
          // Expand
          content.style.maxHeight = content.scrollHeight + 'px';
          item.classList.remove('collapsed');
          item.setAttribute('data-collapsed', 'false');
        } else {
          // Collapse
          (content as HTMLElement).style.maxHeight = '0';
          item.classList.add('collapsed');
          item.setAttribute('data-collapsed', 'true');
        }
      });
    });
  });
</script>

<style lang="scss">
  @use "../styles/variables" as *;

  .weekly-problem-item {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 24px;
    margin-bottom: 24px;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    position: relative;

    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
      border-color: rgba(255, 255, 255, 0.2);
    }

    &.collapsed {
      .chevron {
        transform: rotate(-90deg);
      }
    }
  }

  .collapse-toggle {
    position: absolute;
    top: 16px;
    right: 16px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 6px;
    color: inherit;
    cursor: pointer;
    padding: 8px;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;

    &:hover {
      background: rgba(255, 255, 255, 0.2);
      border-color: rgba(255, 255, 255, 0.3);
    }

    &:focus {
      outline: 2px solid rgba(255, 255, 255, 0.4);
      outline-offset: 2px;
    }
  }

  .chevron {
    transition: transform 0.3s ease;
  }

  .problem-header {
    margin-bottom: 20px;
    padding-right: 40px; // Make room for collapse button

    .collapsed & {
      margin-bottom: 0;
    }
  }

  .problem-meta {
    display: flex;
    flex-direction: column;
    gap: 4px;
    margin-bottom: 12px;

    @media (min-width: 768px) {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }
  }

  .author,
  .presented-info {
    font-size: 0.9rem;
    opacity: 0.8;
  }

  .author {
    font-weight: 500;
  }

  .problem-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0 0 16px 0;
    line-height: 1.3;
    
    @media (max-width: 768px) {
      font-size: 1.3rem;
      word-break: break-word;
      hyphens: auto;
    }
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 12px;
  }

  .collapsible-content {
    transition: max-height 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
  }

  .problem-content {
    margin-bottom: 20px;
  }

  .snippet-container {
    margin-bottom: 20px;
  }

  .snippet {
    background: rgba(0, 0, 0, 0.2);
    border-left: 4px solid $accent-color-light;
    padding: 16px;
    border-radius: 6px;
    margin: 0;
    font-size: 0.95rem;
    line-height: 1.6;
    
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
    overflow: hidden;
    
    :global(span) {
      color: $accent-color-light;
    }

    :global(code) {
      background: rgba(255, 255, 255, 0.1);
      padding: 2px 6px;
      border-radius: 4px;
      font-family: 'Courier New', monospace;
    }
  }

  .problem-footer {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 20px;
    margin-top: 20px;
  }

  @media (max-width: 768px) {
    .weekly-problem-item {
      padding: 20px;
      margin-bottom: 20px;
    }

    .collapse-toggle {
      top: 12px;
      right: 12px;
      padding: 6px;
    }

    .problem-header {
      padding-right: 36px;
    }

    .problem-meta {
      gap: 8px;
    }

    .tags {
      gap: 6px;
    }
  }

  @media print {
    .weekly-problem-item {
      background: none;
      border: 1px solid #ccc;
      box-shadow: none;
      break-inside: avoid;
    }

    .collapse-toggle {
      display: none;
    }

    .collapsible-content {
      max-height: none !important;
      overflow: visible !important;
    }
  }
</style>