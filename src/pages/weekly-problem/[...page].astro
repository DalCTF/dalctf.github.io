---
import type { GetStaticPaths, Page } from "astro";
import Banner from "../../components/Banner.astro";
import Button from "../../components/Button.astro";
import FlagInput from "../../components/FlagInput.astro";
import Hero from "../../components/Hero.astro";
import Spacer from "../../components/Spacer.astro";
import Tag from "../../components/Tag.astro";
import WeeklyProblemItem from "../../components/WeeklyProblemItem.astro";
import Layout from "../../layouts/Layout.astro";
import { WeeklyProblems, type WeeklyProblem } from "../../loaders/WeeklyProblem";
import { hexFor } from "../../util/colors";
import { number } from "astro:schema";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
    const weekly_problems = await WeeklyProblems.shared.list();

	// console.log("\nPROBLEMS\n\n");
	// for (let problem of weekly_problems) {
	// 	console.log(problem);
	// }
	console.log("------------unformated weekly problems--------------");
	console.log(weekly_problems)
	console.log("----------PROBLEM OF THE WEEK----------");
	const pow = [];
	let id_counter = 0;
	for (let problem of weekly_problems) {
		// if (problem.id.startsWith("weekly-problems_pow")) {
		if (problem.active) {
			let wp: WeeklyProblem & { id: number } = {
				id: id_counter,
				author: problem.author,
				path: problem.path,
				name: problem.name,
				presentedBy: problem.presentedBy,
				snippet: problem.snippet,
				category: problem.category,
				tags: problem.tags,
				datePresented: problem.datePresented,
				title: problem.title,
				link: "",
				flag: problem.flag || "TEST",
				flagFormat: problem.flagFormat || "dalctf{.*}",
				active: problem.active
				};
			console.log(wp);
			pow.push(wp);
			id_counter++;
		}
		// }
	}
	// console.log(pow);

	// pow.sort((a, b) => {
	// 	if (!(Number)(a.id)) return 1;
	// 	if (!(Number)(b.id)) return -1;
	// 	return (Number)(b.id )- (Number)(a.id);
	// });

	pow.sort((a, b) => {
		return a.id - b.id;
	});

	return paginate(pow, {
		pageSize: 5,
	});
};

type Props = {
    page: Page<{
		name: string;
		author: string;
		tags: string[];
		presentedBy: string | undefined;
		datePresented: string;
		snippet: string | undefined;
		category: any;
		id: string;
        problem: WeeklyProblem;
		flag: string;
		flagFormat: string;
		active: boolean;
    }>;
}; 

const { page } = Astro.props; 
---

<!-- <WeeklyProblemItem title="Test" author="Author" presentedBy="Nir"></WeeklyProblemItem> -->

<Layout title="Weekly Problem(s) | Status 418" description="">

	<section>

 	</section>
 	<!-- Hero -->
	<Hero title="Weekly Problems" />
		<section class="flex justify-center">
				<p>Stay sharp with our weekly challenges! Each week, we present a new problem to test your skills and keep you engaged. 
					Dive in, solve the puzzles, and enhance your expertise one challenge at a time.</p>
				<p>Have a suggestion for a challenge to be presented next week, or you wrote a writeup for one of our weekly challenges 
					and want it presented on the site? Get in touch with a society exec on our 
					<a href="https://discord.gg/4vEJJF6CQg">Discord.</a></p>
				<Spacer height={16} />
				<Button text="See Past Weekly Problems" url="/past-weekly-problems" />
		</section>	
	
	<!-- Problems go here -->
	<section>
		{
			page.data.map((problem) => (
				<div>
					<WeeklyProblemItem
						id={problem.id}
						name={problem.name}
						author={problem.author}
						presentedBy={problem.presentedBy}
						datePresented={problem.datePresented}
						snippet={problem.snippet}
						tags={problem.tags}
						flag={problem.flag}
						flagFormat={problem.flagFormat}
					/>
					<Spacer height={24} />
					{/* <Button text="Read more" url={"/weekly-problem/" + problem.id} /> */}
				</div>
				<Spacer height={48} />
			))
		}
	</section>

</Layout>
