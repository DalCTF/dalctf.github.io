---
import "highlight.js/styles/github-dark.css";

import type { GetStaticPaths } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";

import Hero from "../../components/Hero.astro";
import Tag from "../../components/Tag.astro";
import Layout from "../../layouts/Layout.astro";
import { tagFor } from "../../util/tags";

export const getStaticPaths: GetStaticPaths = async () => {
    return (await getCollection("writeups")).map((writeup) => {
        return {
            params: { slug: writeup.data.id },
            props: { writeup },
        };
    });
};

type Props = {
    writeup: CollectionEntry<"writeups">;
};

const { writeup } = Astro.props;

const tags = (writeup.data.tags || []).map((tag) =>
    tagFor(tag, "border", false),
);

// To-do: Sanitize HTML and Markdown from writeup
---

<Layout title={`${writeup.data.title} | Writeups | Status 418`} description="">
    <!-- Hero -->
    <Hero title={writeup.data.title} upper={writeup.data.competition}>
        <div class="tags">
            {
                tags.map((tag) => (
                    <Tag
                        text={tag.text}
                        color={tag.color}
                        type={tag.type}
                        url={tag.url}
                    />
                ))
            }
        </div>
    </Hero>

    <!-- Content -->
    <section class="content">
        <div set:html={writeup.data.rendered} />
    </section>
</Layout>

<style lang="scss">
    @use "../../styles/variables" as *;

    .content {
        :global(a) {
            color: $accent-color-light;
        }

        :global(p) {
            margin-bottom: 24px;
        }

        :global(h2) {
            margin-bottom: 24px;

            :global(:not(:first-of-type)) {
                margin-top: 48px;
            }
        }

        :global(code) {
            background: $background-secondary-color;
            padding: 0.2em 0.5em;
            border-radius: 6px;
            font-size: 85%;
            margin: 0;

            //
            // Solves issue where long lines would not break
            //
            white-space: pre-wrap; /* Allow wrapping of preformatted text */
            word-wrap: break-word; /* Break words that are too long to fit */
            word-break: break-word; /* Break lines at any word boundary */
            overflow-wrap: anywhere; /* Force word breaks anywhere if necessary */
        }

        :global(pre) {
            background: $background-secondary-color;
            border-radius: 8px;
            margin: 24px 0px;
            display: block;
            padding: 16px;

            :global(code) {
                padding: 0px;
            }

            //
            // Solves issue where long lines would not break
            //
            white-space: pre-wrap; /* Allow wrapping of preformatted text */
            word-wrap: break-word; /* Break words that are too long to fit */
            word-break: break-word; /* Break lines at any word boundary */
            overflow-wrap: anywhere; /* Force word breaks anywhere if necessary */
        }
    }
</style>
